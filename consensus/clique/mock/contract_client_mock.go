// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethereum/go-ethereum/consensus/clique (interfaces: ContractClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	consensus "github.com/ethereum/go-ethereum/consensus"
	ctypes "github.com/ethereum/go-ethereum/consensus/clique/ctypes"
	core "github.com/ethereum/go-ethereum/core"
	state "github.com/ethereum/go-ethereum/core/state"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockContractClient is a mock of ContractClient interface.
type MockContractClient struct {
	ctrl     *gomock.Controller
	recorder *MockContractClientMockRecorder
}

// MockContractClientMockRecorder is the mock recorder for MockContractClient.
type MockContractClientMockRecorder struct {
	mock *MockContractClient
}

// NewMockContractClient creates a new mock instance.
func NewMockContractClient(ctrl *gomock.Controller) *MockContractClient {
	mock := &MockContractClient{ctrl: ctrl}
	mock.recorder = &MockContractClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractClient) EXPECT() *MockContractClientMockRecorder {
	return m.recorder
}

// CommitSpan mocks base method.
func (m *MockContractClient) CommitSpan(arg0 common.Address, arg1 *state.StateDB, arg2 *types.Header, arg3 core.ChainContext, arg4 *[]*types.Transaction, arg5 *[]*types.Receipt, arg6 *[]*types.Transaction, arg7 *uint64, arg8 bool, arg9 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitSpan", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitSpan indicates an expected call of CommitSpan.
func (mr *MockContractClientMockRecorder) CommitSpan(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitSpan", reflect.TypeOf((*MockContractClient)(nil).CommitSpan), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// DistributeToValidator mocks base method.
func (m *MockContractClient) DistributeToValidator(arg0 common.Address, arg1 *big.Int, arg2 common.Address, arg3 *state.StateDB, arg4 *types.Header, arg5 core.ChainContext, arg6 *[]*types.Transaction, arg7 *[]*types.Receipt, arg8 *[]*types.Transaction, arg9 *uint64, arg10 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributeToValidator", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].(error)
	return ret0
}

// DistributeToValidator indicates an expected call of DistributeToValidator.
func (mr *MockContractClientMockRecorder) DistributeToValidator(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeToValidator", reflect.TypeOf((*MockContractClient)(nil).DistributeToValidator), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// GetCurrentSpan mocks base method.
func (m *MockContractClient) GetCurrentSpan(arg0 context.Context, arg1 *types.Header) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSpan", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSpan indicates an expected call of GetCurrentSpan.
func (mr *MockContractClientMockRecorder) GetCurrentSpan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSpan", reflect.TypeOf((*MockContractClient)(nil).GetCurrentSpan), arg0, arg1)
}

// GetCurrentValidators mocks base method.
func (m *MockContractClient) GetCurrentValidators(arg0 common.Hash, arg1 *big.Int) ([]*ctypes.Validator, *ctypes.SystemContracts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentValidators", arg0, arg1)
	ret0, _ := ret[0].([]*ctypes.Validator)
	ret1, _ := ret[1].(*ctypes.SystemContracts)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCurrentValidators indicates an expected call of GetCurrentValidators.
func (mr *MockContractClientMockRecorder) GetCurrentValidators(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentValidators", reflect.TypeOf((*MockContractClient)(nil).GetCurrentValidators), arg0, arg1)
}

// GetEligibleValidators mocks base method.
func (m *MockContractClient) GetEligibleValidators(arg0 common.Hash, arg1 uint64) ([]*ctypes.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEligibleValidators", arg0, arg1)
	ret0, _ := ret[0].([]*ctypes.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEligibleValidators indicates an expected call of GetEligibleValidators.
func (mr *MockContractClientMockRecorder) GetEligibleValidators(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEligibleValidators", reflect.TypeOf((*MockContractClient)(nil).GetEligibleValidators), arg0, arg1)
}

// Inject mocks base method.
func (m *MockContractClient) Inject(arg0 common.Address, arg1 ctypes.SignerTxFn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inject", arg0, arg1)
}

// Inject indicates an expected call of Inject.
func (mr *MockContractClientMockRecorder) Inject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockContractClient)(nil).Inject), arg0, arg1)
}

// IsSlashed mocks base method.
func (m *MockContractClient) IsSlashed(arg0 common.Address, arg1 consensus.ChainHeaderReader, arg2 common.Address, arg3 *big.Int, arg4 *types.Header) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlashed", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSlashed indicates an expected call of IsSlashed.
func (mr *MockContractClientMockRecorder) IsSlashed(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlashed", reflect.TypeOf((*MockContractClient)(nil).IsSlashed), arg0, arg1, arg2, arg3, arg4)
}

// SetSigner mocks base method.
func (m *MockContractClient) SetSigner(arg0 types.Signer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSigner", arg0)
}

// SetSigner indicates an expected call of SetSigner.
func (mr *MockContractClientMockRecorder) SetSigner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSigner", reflect.TypeOf((*MockContractClient)(nil).SetSigner), arg0)
}

// Slash mocks base method.
func (m *MockContractClient) Slash(arg0, arg1 common.Address, arg2 consensus.ChainHeaderReader, arg3 *state.StateDB, arg4 *types.Header, arg5 core.ChainContext, arg6 *[]*types.Transaction, arg7 *[]*types.Receipt, arg8 *[]*types.Transaction, arg9 *uint64, arg10 bool, arg11 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slash", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
	ret0, _ := ret[0].(error)
	return ret0
}

// Slash indicates an expected call of Slash.
func (mr *MockContractClientMockRecorder) Slash(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slash", reflect.TypeOf((*MockContractClient)(nil).Slash), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
}
